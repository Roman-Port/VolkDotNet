using System;
using VolkDotNet.Internal;

namespace VolkDotNet
{
    public unsafe class VolkDelegates
    {
        public delegate IntPtr __d_volk_get_alignment();
        public delegate IntPtr __d_volk_malloc(IntPtr size, IntPtr alignment);
        public delegate void __d_volk_free(IntPtr buffer);
        public delegate void __d_volk_16i_32fc_dot_prod_32fc(VolkComplexFloat* result, short* input, VolkComplexFloat* taps, int num_points);
        public delegate void __d_volk_16i_branch_4_state_8(short* target, short* src0, byte** permuters, short* cntl2, short* cntl3, short* scalars);
        public delegate void __d_volk_16i_convert_8i(sbyte* outputVector, short* inputVector, int num_points);
        public delegate void __d_volk_16i_max_star_16i(short* target, short* src0, int num_points);
        public delegate void __d_volk_16i_max_star_horizontal_16i(short* target, short* src0, int num_points);
        public delegate void __d_volk_16i_permute_and_scalar_add(short* target, short* src0, short* permute_indexes, short* cntl0, short* cntl1, short* cntl2, short* cntl3, short* scalars, int num_points);
        public delegate void __d_volk_16i_s32f_convert_32f(float* outputVector, short* inputVector, float scalar, int num_points);
        public delegate void __d_volk_16i_x4_quad_max_star_16i(short* target, short* src0, short* src1, short* src2, short* src3, int num_points);
        public delegate void __d_volk_16i_x5_add_quad_16i_x4(short* target0, short* target1, short* target2, short* target3, short* src0, short* src1, short* src2, short* src3, short* src4, int num_points);
        public delegate void __d_volk_16ic_convert_32fc(VolkComplexFloat* outputVector, VolkComplexShort* inputVector, int num_points);
        public delegate void __d_volk_16ic_deinterleave_16i_x2(short* iBuffer, short* qBuffer, VolkComplexShort* complexVector, int num_points);
        public delegate void __d_volk_16ic_deinterleave_real_16i(short* iBuffer, VolkComplexShort* complexVector, int num_points);
        public delegate void __d_volk_16ic_deinterleave_real_8i(sbyte* iBuffer, VolkComplexShort* complexVector, int num_points);
        public delegate void __d_volk_16ic_magnitude_16i(short* magnitudeVector, VolkComplexShort* complexVector, int num_points);
        public delegate void __d_volk_16ic_s32f_deinterleave_32f_x2(float* iBuffer, float* qBuffer, VolkComplexShort* complexVector, float scalar, int num_points);
        public delegate void __d_volk_16ic_s32f_deinterleave_real_32f(float* iBuffer, VolkComplexShort* complexVector, float scalar, int num_points);
        public delegate void __d_volk_16ic_s32f_magnitude_32f(float* magnitudeVector, VolkComplexShort* complexVector, float scalar, int num_points);
        public delegate void __d_volk_16ic_x2_dot_prod_16ic(VolkComplexShort* result, VolkComplexShort* in_a, VolkComplexShort* in_b, int num_points);
        public delegate void __d_volk_16ic_x2_multiply_16ic(VolkComplexShort* result, VolkComplexShort* in_a, VolkComplexShort* in_b, int num_points);
        public delegate void __d_volk_16u_byteswap(ushort* intsToSwap, int num_points);
        public delegate void __d_volk_16u_byteswappuppet_16u(ushort* output, ushort* intsToSwap, int num_points);
        public delegate void __d_volk_32f_64f_add_64f(double* cVector, float* aVector, double* bVector, int num_points);
        public delegate void __d_volk_32f_64f_multiply_64f(double* cVector, float* aVector, double* bVector, int num_points);
        public delegate void __d_volk_32f_8u_polarbutterfly_32f(float* llrs, byte* u, int frame_exp, int stage, int u_num, int row);
        public delegate void __d_volk_32f_8u_polarbutterflypuppet_32f(float* llrs, float* input, byte* u, int elements);
        public delegate void __d_volk_32f_accumulator_s32f(float* result, float* inputBuffer, int num_points);
        public delegate void __d_volk_32f_acos_32f(float* bVector, float* aVector, int num_points);
        public delegate void __d_volk_32f_asin_32f(float* bVector, float* aVector, int num_points);
        public delegate void __d_volk_32f_atan_32f(float* bVector, float* aVector, int num_points);
        public delegate void __d_volk_32f_binary_slicer_32i(int* cVector, float* aVector, int num_points);
        public delegate void __d_volk_32f_binary_slicer_8i(sbyte* cVector, float* aVector, int num_points);
        public delegate void __d_volk_32f_convert_64f(double* outputVector, float* inputVector, int num_points);
        public delegate void __d_volk_32f_cos_32f(float* cosVector, float* inVector, int num_points);
        public delegate void __d_volk_32f_exp_32f(float* bVector, float* aVector, int num_points);
        public delegate void __d_volk_32f_expfast_32f(float* bVector, float* aVector, int num_points);
        public delegate void __d_volk_32f_index_max_16u(ushort* target, float* src0, uint num_points);
        public delegate void __d_volk_32f_index_max_32u(uint* target, float* src0, uint num_points);
        public delegate void __d_volk_32f_invsqrt_32f(float* cVector, float* aVector, int num_points);
        public delegate void __d_volk_32f_log2_32f(float* bVector, float* aVector, int num_points);
        public delegate void __d_volk_32f_null_32f(float* bVector, float* aVector, int num_points);
        public delegate void __d_volk_32f_s32f_32f_fm_detect_32f(float* outputVector, float* inputVector, float bound, float* saveValue, int num_points);
        public delegate void __d_volk_32f_s32f_add_32f(float* cVector, float* aVector, float scalar, int num_points);
        public delegate void __d_volk_32f_s32f_calc_spectral_noise_floor_32f(float* noiseFloorAmplitude, float* realDataPoints, float spectralExclusionValue, int num_points);
        public delegate void __d_volk_32f_s32f_convert_16i(short* outputVector, float* inputVector, float scalar, int num_points);
        public delegate void __d_volk_32f_s32f_convert_32i(int* outputVector, float* inputVector, float scalar, int num_points);
        public delegate void __d_volk_32f_s32f_convert_8i(sbyte* outputVector, float* inputVector, float scalar, int num_points);
        public delegate void __d_volk_32f_s32f_mod_rangepuppet_32f(float* output, float* input, float bound, int num_points);
        public delegate void __d_volk_32f_s32f_multiply_32f(float* cVector, float* aVector, float scalar, int num_points);
        public delegate void __d_volk_32f_s32f_normalize(float* vecBuffer, float scalar, int num_points);
        public delegate void __d_volk_32f_s32f_power_32f(float* cVector, float* aVector, float power, int num_points);
        public delegate void __d_volk_32f_s32f_s32f_mod_range_32f(float* outputVector, float* inputVector, float lower_bound, float upper_bound, int num_points);
        public delegate void __d_volk_32f_s32f_stddev_32f(float* stddev, float* inputBuffer, float mean, int num_points);
        public delegate void __d_volk_32f_sin_32f(float* sinVector, float* inVector, int num_points);
        public delegate void __d_volk_32f_sqrt_32f(float* cVector, float* aVector, int num_points);
        public delegate void __d_volk_32f_stddev_and_mean_32f_x2(float* stddev, float* mean, float* inputBuffer, int num_points);
        public delegate void __d_volk_32f_tan_32f(float* bVector, float* aVector, int num_points);
        public delegate void __d_volk_32f_tanh_32f(float* cVector, float* aVector, int num_points);
        public delegate void __d_volk_32f_x2_add_32f(float* cVector, float* aVector, float* bVector, int num_points);
        public delegate void __d_volk_32f_x2_divide_32f(float* cVector, float* aVector, float* bVector, int num_points);
        public delegate void __d_volk_32f_x2_dot_prod_16i(short* result, float* input, float* taps, int num_points);
        public delegate void __d_volk_32f_x2_dot_prod_32f(float* result, float* input, float* taps, int num_points);
        public delegate void __d_volk_32f_x2_fm_detectpuppet_32f(float* outputVector, float* inputVector, float* saveValue, int num_points);
        public delegate void __d_volk_32f_x2_interleave_32fc(VolkComplexFloat* complexVector, float* iBuffer, float* qBuffer, int num_points);
        public delegate void __d_volk_32f_x2_max_32f(float* cVector, float* aVector, float* bVector, int num_points);
        public delegate void __d_volk_32f_x2_min_32f(float* cVector, float* aVector, float* bVector, int num_points);
        public delegate void __d_volk_32f_x2_multiply_32f(float* cVector, float* aVector, float* bVector, int num_points);
        public delegate void __d_volk_32f_x2_pow_32f(float* cVector, float* bVector, float* aVector, int num_points);
        public delegate void __d_volk_32f_x2_s32f_interleave_16ic(VolkComplexShort* complexVector, float* iBuffer, float* qBuffer, float scalar, int num_points);
        public delegate void __d_volk_32f_x2_subtract_32f(float* cVector, float* aVector, float* bVector, int num_points);
        public delegate void __d_volk_32f_x3_sum_of_poly_32f(float* target, float* src0, float* center_point_array, float* cutoff, int num_points);
        public delegate void __d_volk_32fc_32f_add_32fc(VolkComplexFloat* cVector, VolkComplexFloat* aVector, float* bVector, int num_points);
        public delegate void __d_volk_32fc_32f_dot_prod_32fc(VolkComplexFloat* result, VolkComplexFloat* input, float* taps, int num_points);
        public delegate void __d_volk_32fc_32f_multiply_32fc(VolkComplexFloat* cVector, VolkComplexFloat* aVector, float* bVector, int num_points);
        public delegate void __d_volk_32fc_accumulator_s32fc(VolkComplexFloat* result, VolkComplexFloat* inputBuffer, int num_points);
        public delegate void __d_volk_32fc_conjugate_32fc(VolkComplexFloat* cVector, VolkComplexFloat* aVector, int num_points);
        public delegate void __d_volk_32fc_convert_16ic(VolkComplexShort* outputVector, VolkComplexFloat* inputVector, int num_points);
        public delegate void __d_volk_32fc_deinterleave_32f_x2(float* iBuffer, float* qBuffer, VolkComplexFloat* complexVector, int num_points);
        public delegate void __d_volk_32fc_deinterleave_64f_x2(double* iBuffer, double* qBuffer, VolkComplexFloat* complexVector, int num_points);
        public delegate void __d_volk_32fc_deinterleave_imag_32f(float* qBuffer, VolkComplexFloat* complexVector, int num_points);
        public delegate void __d_volk_32fc_deinterleave_real_32f(float* iBuffer, VolkComplexFloat* complexVector, int num_points);
        public delegate void __d_volk_32fc_deinterleave_real_64f(double* iBuffer, VolkComplexFloat* complexVector, int num_points);
        public delegate void __d_volk_32fc_index_max_16u(ushort* target, VolkComplexFloat* src0, uint num_points);
        public delegate void __d_volk_32fc_index_max_32u(uint* target, VolkComplexFloat* src0, uint num_points);
        public delegate void __d_volk_32fc_magnitude_32f(float* magnitudeVector, VolkComplexFloat* complexVector, int num_points);
        public delegate void __d_volk_32fc_magnitude_squared_32f(float* magnitudeVector, VolkComplexFloat* complexVector, int num_points);
        public delegate void __d_volk_32fc_s32f_atan2_32f(float* outputVector, VolkComplexFloat* complexVector, float normalizeFactor, int num_points);
        public delegate void __d_volk_32fc_s32f_deinterleave_real_16i(short* iBuffer, VolkComplexFloat* complexVector, float scalar, int num_points);
        public delegate void __d_volk_32fc_s32f_magnitude_16i(short* magnitudeVector, VolkComplexFloat* complexVector, float scalar, int num_points);
        public delegate void __d_volk_32fc_s32f_power_32fc(VolkComplexFloat* cVector, VolkComplexFloat* aVector, float power, int num_points);
        public delegate void __d_volk_32fc_s32f_power_spectral_densitypuppet_32f(float* logPowerOutput, VolkComplexFloat* complexFFTInput, float normalizationFactor, int num_points);
        public delegate void __d_volk_32fc_s32f_power_spectrum_32f(float* logPowerOutput, VolkComplexFloat* complexFFTInput, float normalizationFactor, int num_points);
        public delegate void __d_volk_32fc_s32f_x2_power_spectral_density_32f(float* logPowerOutput, VolkComplexFloat* complexFFTInput, float normalizationFactor, float rbw, int num_points);
        public delegate void __d_volk_32fc_s32fc_multiply_32fc(VolkComplexFloat* cVector, VolkComplexFloat* aVector, VolkComplexFloat scalar, int num_points);
        public delegate void __d_volk_32fc_s32fc_rotatorpuppet_32fc(VolkComplexFloat* outVector, VolkComplexFloat* inVector, VolkComplexFloat phase_inc, int num_points);
        public delegate void __d_volk_32fc_s32fc_x2_rotator_32fc(VolkComplexFloat* outVector, VolkComplexFloat* inVector, VolkComplexFloat phase_inc, VolkComplexFloat* phase, int num_points);
        public delegate void __d_volk_32fc_x2_add_32fc(VolkComplexFloat* cVector, VolkComplexFloat* aVector, VolkComplexFloat* bVector, int num_points);
        public delegate void __d_volk_32fc_x2_conjugate_dot_prod_32fc(VolkComplexFloat* result, VolkComplexFloat* input, VolkComplexFloat* taps, int num_points);
        public delegate void __d_volk_32fc_x2_divide_32fc(VolkComplexFloat* cVector, VolkComplexFloat* aVector, VolkComplexFloat* bVector, int num_points);
        public delegate void __d_volk_32fc_x2_dot_prod_32fc(VolkComplexFloat* result, VolkComplexFloat* input, VolkComplexFloat* taps, int num_points);
        public delegate void __d_volk_32fc_x2_multiply_32fc(VolkComplexFloat* cVector, VolkComplexFloat* aVector, VolkComplexFloat* bVector, int num_points);
        public delegate void __d_volk_32fc_x2_multiply_conjugate_32fc(VolkComplexFloat* cVector, VolkComplexFloat* aVector, VolkComplexFloat* bVector, int num_points);
        public delegate void __d_volk_32fc_x2_s32f_square_dist_scalar_mult_32f(float* target, VolkComplexFloat* src0, VolkComplexFloat* points, float scalar, int num_points);
        public delegate void __d_volk_32fc_x2_s32fc_multiply_conjugate_add_32fc(VolkComplexFloat* cVector, VolkComplexFloat* aVector, VolkComplexFloat* bVector, VolkComplexFloat scalar, int num_points);
        public delegate void __d_volk_32fc_x2_square_dist_32f(float* target, VolkComplexFloat* src0, VolkComplexFloat* points, int num_points);
        public delegate void __d_volk_32i_s32f_convert_32f(float* outputVector, int* inputVector, float scalar, int num_points);
        public delegate void __d_volk_32i_x2_and_32i(int* cVector, int* aVector, int* bVector, int num_points);
        public delegate void __d_volk_32i_x2_or_32i(int* cVector, int* aVector, int* bVector, int num_points);
        public delegate void __d_volk_32u_byteswap(uint* intsToSwap, int num_points);
        public delegate void __d_volk_32u_byteswappuppet_32u(uint* output, uint* intsToSwap, int num_points);
        public delegate void __d_volk_32u_popcnt(uint* ret, uint value);
        public delegate void __d_volk_32u_popcntpuppet_32u(uint* outVector, uint* inVector, int num_points);
        public delegate void __d_volk_32u_reverse_32u(uint* _out, uint* _in, int num_points);
        public delegate void __d_volk_64f_convert_32f(float* outputVector, double* inputVector, int num_points);
        public delegate void __d_volk_64f_x2_add_64f(double* cVector, double* aVector, double* bVector, int num_points);
        public delegate void __d_volk_64f_x2_max_64f(double* cVector, double* aVector, double* bVector, int num_points);
        public delegate void __d_volk_64f_x2_min_64f(double* cVector, double* aVector, double* bVector, int num_points);
        public delegate void __d_volk_64f_x2_multiply_64f(double* cVector, double* aVector, double* bVector, int num_points);
        public delegate void __d_volk_64u_byteswap(ulong* intsToSwap, int num_points);
        public delegate void __d_volk_64u_byteswappuppet_64u(ulong* output, ulong* intsToSwap, int num_points);
        public delegate void __d_volk_64u_popcnt(ulong* ret, ulong value);
        public delegate void __d_volk_64u_popcntpuppet_64u(ulong* outVector, ulong* inVector, int num_points);
        public delegate void __d_volk_8i_convert_16i(short* outputVector, sbyte* inputVector, int num_points);
        public delegate void __d_volk_8i_s32f_convert_32f(float* outputVector, sbyte* inputVector, float scalar, int num_points);
        public delegate void __d_volk_8ic_deinterleave_16i_x2(short* iBuffer, short* qBuffer, VolkComplexByte* complexVector, int num_points);
        public delegate void __d_volk_8ic_deinterleave_real_16i(short* iBuffer, VolkComplexByte* complexVector, int num_points);
        public delegate void __d_volk_8ic_deinterleave_real_8i(sbyte* iBuffer, VolkComplexByte* complexVector, int num_points);
        public delegate void __d_volk_8ic_s32f_deinterleave_32f_x2(float* iBuffer, float* qBuffer, VolkComplexByte* complexVector, float scalar, int num_points);
        public delegate void __d_volk_8ic_s32f_deinterleave_real_32f(float* iBuffer, VolkComplexByte* complexVector, float scalar, int num_points);
        public delegate void __d_volk_8ic_x2_multiply_conjugate_16ic(VolkComplexShort* cVector, VolkComplexByte* aVector, VolkComplexByte* bVector, int num_points);
        public delegate void __d_volk_8ic_x2_s32f_multiply_conjugate_32fc(VolkComplexFloat* cVector, VolkComplexByte* aVector, VolkComplexByte* bVector, float scalar, int num_points);
        public delegate void __d_volk_8u_conv_k7_r2puppet_8u(byte* syms, byte* dec, int framebits);
        public delegate void __d_volk_8u_x2_encodeframepolar_8u(byte* frame, byte* temp, int frame_size);
        public delegate void __d_volk_8u_x3_encodepolar_8u_x2(byte* frame, byte* temp, byte* frozen_bit_mask, byte* frozen_bits, byte* info_bits, int frame_size);
        public delegate void __d_volk_8u_x3_encodepolarpuppet_8u(byte* frame, byte* frozen_bit_mask, byte* frozen_bits, byte* info_bits, int frame_size);
        public delegate void __d_volk_8u_x4_conv_k7_r2_8u(byte* Y, byte* X, byte* syms, byte* dec, int framebits, int excess, byte* Branchtab);
    }
}
